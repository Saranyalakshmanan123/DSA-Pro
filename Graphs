class Graph:
    def __init__(self):
        self.graph = {}
        self.directed = False

    def add_vertex(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []

    def add_edge(self, src, dest):
        self.add_vertex(src)
        self.add_vertex(dest)
        self.graph[src].append(dest)
        if not self.directed:
            self.graph[dest].append(src)

    def display_graph(self):
        for vertex in self.graph:
            print(f"{vertex} -> {self.graph[vertex]}")

    def bfs(self, start_vertex):
        if start_vertex not in self.graph:
            print("Vertex not found")
            return

        visited = [start_vertex]
        queue = [start_vertex]

        while queue:
            current_vertex = queue.pop(0)
            print(current_vertex, end=" ")

            for neighbour in self.graph[current_vertex]:
                if neighbour not in visited:
                    queue.append(neighbour)
                    visited.append(neighbour)

    def dfs(self, vertex, visited=None):
        if vertex not in self.graph:
            print("Vertex not found")
            return

        if visited is None:
            visited = []

        if vertex not in visited:
            print(vertex, end=" ")
            visited.append(vertex)
            for neighbour in self.graph[vertex]:
                self.dfs(neighbour, visited)


if __name__ == "__main__":
    # Create a graph
    g = Graph()

    # Add edges
    g.add_edge('A', 'B')
    g.add_edge('C', 'A')
    g.add_edge('B', 'C')
    g.add_edge('C', 'D')
    g.add_edge('A', 'E')
    g.add_edge('D', 'A')

    # Display graph
    print("Graph:")
    g.display_graph()

    # Perform BFS traversal
    print("\nBFS Traversal:")
    g.bfs('A')

    # Perform DFS traversal
    print("\n\nDFS Traversal:")
    g.dfs('A')
